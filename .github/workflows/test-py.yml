name: Python Tests

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      python_version:
        required: true
        type: string
      clone_repository_script:
        required: true
        type: string
      repositories:
        required: true
        type: string
      repositories_default_branch:
        required: true
        type: string
      badges_repository:
        required: true
        type: string
      badges_repository_branch:
        required: true
        type: string
      badges_repository_path:
        required: true
        type: string
      timeout_minutes:
        required: false
        type: number
        default: 7
      ci_repository:
        required: true
        type: string
      ci_repository_branch:
        required: true
        type: string
      ci_repository_path:
        required: true
        type: string
      report_script:
        required: true
        type: string
      search_tests_command:
        required: true
        type: string
      documents_folder:
        required: false
        type: boolean
        default: false
      unit_tests_command:
        required: true
        type: string
      coverage_badge:
        required: true
        type: string
      coverage_script_path:
        required: true
        type: string
      requirements_filename:
        required: true
        type: string
        default: requirements.txt
      execution:
        required: false
        type: boolean
        default: true
    secrets:
      access_token:
        required: true
      slack_bot_token:
        required: true

jobs:
  test-py:
    name: Python Tests
    if: ${{ inputs.execution }}
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout_minutes }}
    steps:
      - name: Install OS dependencies
        run: sudo apt-get install libxml2-dev libxslt-dev
      - name: Install OS dependencies (3.6)
        if: ${{ inputs.python_version == '3.6' }}
        run: |
          sudo apt-get -y install python-numpy
          sudo ln -s /usr/include/locale.h /usr/include/xlocale.h
      - name: Checkout branch
        uses: actions/checkout@v2
        with:
          path: ${{ inputs.repository }}
      - name: Clone CI repository
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.ci_repository }}
          ref: ${{ inputs.ci_repository_branch }}
          path: ${{ inputs.ci_repository_path }}
          token: ${{ secrets.access_token }}
      - name: Clone repositories
        run: |
          bash ./${{ inputs.clone_repository_script }} ${{ inputs.repositories }} ${{ inputs.repositories_default_branch }} ${{ secrets.access_token }}
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python_version }}
          architecture: "x64"
      - name: Search missing test modules
        run: ${{ inputs.search_tests_command }}
      - name: Cache pip 2.7
        if: ${{ inputs.python_version == '2.7' }}
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            .tox
          key: py-${{ inputs.python_version }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            py-${{ inputs.python_version }}-pip-${{ hashFiles('**/requirements.txt') }}
      - name: Cache pip 3.6
        if: ${{ inputs.python_version == '3.6' }}
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            .tox
          key: py-${{ inputs.python_version }}-pip-${{ hashFiles('**/requirements_py36.txt') }}
          restore-keys: |
            py-${{ inputs.python_version }}-pip-${{ hashFiles('**/requirements_py36.txt') }}
      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pip wheel
          if [ -f ${{ inputs.repository }}/${{ inputs.requirements_filename }} ]; then pip install -r ${{ inputs.repository }}/${{ inputs.requirements_filename }}; fi
      - name: Show python environment
        run: |
          python --version
          python -m pip list
      - name: Create Documents folder
        if: ${{ inputs.documents_folder }}
        run: |
          mkdir /home/runner/documents
      - name: Create log
        run: |
          cd ${{ inputs.repository }}
          mkdir log
          mkdir log/cp
          mkdir log/dcs
          mkdir log/dms
          mkdir log/ds
          mkdir log/lp
          mkdir log/lsp
          mkdir log/ns
          mkdir log/os
          mkdir log/pp
          mkdir log/ps
          mkdir log/rs
          mkdir log/us
      - name: Run Python tests
        env:
          LOG_FILE_PATH: log/
          CP_LOG_FILE_PATH: log/cp/
          DCS_LOG_FILE_PATH: log/dcs/
          DMS_LOG_FILE_PATH: log/dms/
          DS_LOG_FILE_PATH: log/ds/
          LP_LOG_FILE_PATH: log/lp/
          LSP_LOG_FILE_PATH: log/lsp/
          NS_LOG_FILE_PATH: log/ns/
          OS_LOG_FILE_PATH: log/os/
          PP_LOG_FILE_PATH: log/pp/
          PS_LOG_FILE_PATH: log/ps/
          RS_LOG_FILE_PATH: log/rs/
          US_LOG_FILE_PATH: log/us/
          ACTION_FILE_PATH: app/static/actions/
          LENDINGFRONT_PATH: ${{ github.workspace }}
          PYTHONPATH: ${{ github.workspace }}/
        run: |
          cd ${{ inputs.repository }}
          ${{ inputs.unit_tests_command }}
      - name: Clone badges repository
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.badges_repository }}
          ref: ${{ inputs.badges_repository_branch }}
          path: ${{ inputs.badges_repository_path }}
          token: ${{ secrets.access_token }}
      - name: Execute coverage
        run: bash -ec 'if [ -f .coverage ]; then coverage-badge -o ${{ inputs.coverage_badge }}; fi'
      - name: Update coverage
        run: bash ./${{ inputs.coverage_script_path }} ${{ inputs.repository }} cp-coverage
      - name: Generate report
        if: (failure() || cancelled()) && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        uses: archive/github-actions-slack@v1.0.3
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.slack_bot_token }}
          slack-channel: "#ci-status"
          slack-text: ":red_circle: `${{github.repository}}` - `${{github.job}}` \n
            *run_id:* `${{github.run_id}}` *run_number:* `${{github.run_number}}` \n
            *author:* `${{github.actor}}`"
      - name: Stop on failure
        if: failure() && inputs.ci_repository
        env:
          LENDINGFRONT_PATH: ${{ github.workspace }}
          PYTHONPATH: ${{ github.workspace }}/
        run: |
          pip install requests
          python ${{ inputs.report_script }} \
            --token=${{ secrets.access_token }} \
            --repository-path=${{ github.repository }} \
            --run-id=${{ github.run_id }}
